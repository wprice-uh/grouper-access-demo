buildscript {
  ext {
    codenarcVersion = '1.3'
    groovyVersion = '2.5.5'
    spockVersion = '1.3-RC1-groovy-2.5'
  }
}

plugins {
  id 'org.springframework.boot' version '2.1.4.RELEASE'
}

apply plugin: 'groovy'
apply plugin: 'io.spring.dependency-management'

// to allow configuring idea to auto-download sources and javadocs
apply plugin: 'idea'

// tasks: narc, codenarcMain, codenarcTest, codenarcIntegrationTest
apply plugin: 'codenarc'

repositories {
  mavenCentral()
}

dependencies {
  codenarc "org.codehaus.groovy:groovy-all:${groovyVersion}"
  codenarc "org.codenarc:CodeNarc:${codenarcVersion}"

  implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
  implementation 'org.springframework.boot:spring-boot-starter'
  implementation 'org.springframework:spring-web'
  implementation 'org.apache.httpcomponents:httpclient'
  implementation 'com.fasterxml.jackson.core:jackson-databind'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation "org.spockframework:spock-core:${spockVersion}"
  testImplementation "org.spockframework:spock-spring:${spockVersion}"
}

/* project settings */
group = 'edu.hawaii.its'
version = '0.0.0'

// renaming 'build' directory to 'target' to workaround command-completion
// collision with build.gradle
buildDir = 'target'

// default to running 'tasks'
defaultTasks = ['tasks']

description = """\
grouper-hack

working example of using RestTemplate to query grouper
"""

// compile java with jdk11 syntax, for jdk11 jvm
sourceCompatibility = 11
targetCompatibility = 11

/* gradle wrapper config */
wrapper { gradleVersion = '5.3.1' }

/* groovy compiler config */
def groovyJvmArgs = [
  // enable assertions
  '-enableassertions',
  // suppress groovy-related access warnings
  '--illegal-access=permit',
  '--add-opens=java.base/java.lang=ALL-UNNAMED',
  '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
  '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
  '--add-opens=java.base/java.util=ALL-UNNAMED',
  '--add-opens=java.base/java.util.regex=ALL-UNNAMED',
  '--add-opens=java.base/java.time=ALL-UNNAMED',
  '--add-opens=java.base/java.time.chrono=ALL-UNNAMED',
  '--add-opens=java.base/java.net=ALL-UNNAMED',
  '--add-opens=java.base/java.io=ALL-UNNAMED',
  '--add-opens=java.base/java.nio.charset=ALL-UNNAMED',
  // logback-related
  '--add-opens=java.base/java.security=ALL-UNNAMED',
]
tasks.withType(GroovyCompile) {
  groovyJvmArgs.each {
    options.forkOptions.jvmArgs << it
  }
}

/* spring boot config */
task removeLogfiles(type: Delete) {
  description = 'Removes log files'
  group = 'build'

  //noinspection GroovyAssignabilityCheck
  delete fileTree('target/logs')
}
bootRun {
  // suppress groovy-related access warnings
  jvmArgs = groovyJvmArgs

  // use 'dev' profile
  systemProperty 'spring.profiles.active', 'dev'

  // allow live reloading of changed resources
  sourceResources sourceSets.main

  dependsOn removeLogfiles
}

/* intellij idea config */
idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

/* codenarc config */
def narcIgnore = false
codenarc {
  config = resources.text.fromFile('config/codenarc/MainConfig.groovy')

  ignoreFailures = narcIgnore
}
codenarcTest {
  config = resources.text.fromFile('config/codenarc/TestConfig.groovy')

  ignoreFailures = narcIgnore
}
codenarcTest.mustRunAfter codenarcMain

//noinspection GroovyAssignabilityCheck
task codenarc {
  description = 'Runs codenarc on all project source files'
  group = 'verification'

  dependsOn codenarcMain, codenarcTest
}

// give *all* codenarc tasks access to the union of *all*
// compilationClasspaths, which is required by some enhanced rules
tasks.withType(CodeNarc) {
  compilationClasspath =
      sourceSets.main.compileClasspath +
      sourceSets.test.compileClasspath
}

// wrapper task which runs codenarc on all phases before reporting failures
task narc {
  doFirst { narcIgnore = true }

  finalizedBy codenarcMain, codenarcTest
}

/* testing config */
test {
  // specifying spring.profile 'testing' to make logging behave as desired;
  // spring itself isn't active during unit tests
  systemProperty 'spring.profiles.active', 'testing'

  // suppress groovy-related access warnings
  jvmArgs = groovyJvmArgs

  // force tests to always re-execute
  outputs.upToDateWhen { false }
  dependsOn removeLogfiles
}
